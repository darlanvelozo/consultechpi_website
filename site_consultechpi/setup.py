#!/usr/bin/env python3
"""
Script de setup para o projeto ConsulTechPI
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao {description.lower()}: {e}")
        print(f"Erro: {e.stderr}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK!")
    return True

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = Path('.env')
    if not env_file.exists():
        print("üìù Criando arquivo .env...")
        env_content = """# Configura√ß√µes do Django
SECRET_KEY=django-insecure-change-this-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Configura√ß√µes de Email (desenvolvimento)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
"""
        with open(env_file, 'w') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado!")
    else:
        print("‚úÖ Arquivo .env j√° existe!")

def main():
    """Fun√ß√£o principal do setup"""
    print("üöÄ Iniciando setup do ConsulTechPI...")
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Criar ambiente virtual se n√£o existir
    venv_path = Path('venv')
    if not venv_path.exists():
        print("\nüì¶ Criando ambiente virtual...")
        if not run_command("python -m venv venv", "Criando ambiente virtual"):
            sys.exit(1)
        print("‚úÖ Ambiente virtual criado!")
        print("‚ö†Ô∏è  IMPORTANTE: Ative o ambiente virtual antes de continuar:")
        print("   Windows: venv\\Scripts\\activate")
        print("   Linux/Mac: source venv/bin/activate")
        return
    else:
        print("‚úÖ Ambiente virtual j√° existe!")
    
    # Criar arquivo .env
    create_env_file()
    
    # Instalar depend√™ncias
    if not run_command("pip install -r requirements.txt", "Instalando depend√™ncias"):
        sys.exit(1)
    
    # Executar migra√ß√µes
    if not run_command("python manage.py makemigrations", "Criando migra√ß√µes"):
        sys.exit(1)
    
    if not run_command("python manage.py migrate", "Aplicando migra√ß√µes"):
        sys.exit(1)
    
    # Criar diret√≥rios necess√°rios
    directories = ['static', 'media', 'templates']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    print("\nüéâ Setup conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Crie um superusu√°rio: python manage.py createsuperuser")
    print("2. Inicie o servidor: python manage.py runserver")
    print("3. Acesse: http://127.0.0.1:8000/")
    print("4. Admin: http://127.0.0.1:8000/admin/")

if __name__ == "__main__":
    main() 